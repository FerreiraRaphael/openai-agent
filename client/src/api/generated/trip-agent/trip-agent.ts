/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * AI Agent API
 * The AI Agent API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { TripDetailsDto, TripQueryRequestDto, TripQueryResponseDto } from '../../model';

import { customInstance } from '../../axios-client';

/**
 * @summary Process a trip planning query in a conversation
 */
export const tripAgentControllerProcessTripQuery = (
  id: string,
  tripQueryRequestDto: TripQueryRequestDto,
  signal?: AbortSignal
) => {
  return customInstance<TripQueryResponseDto>({
    url: `/trip-agent/conversations/${id}/process-query`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: tripQueryRequestDto,
    signal,
  });
};

export const getTripAgentControllerProcessTripQueryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tripAgentControllerProcessTripQuery>>,
    TError,
    { id: string; data: TripQueryRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tripAgentControllerProcessTripQuery>>,
  TError,
  { id: string; data: TripQueryRequestDto },
  TContext
> => {
  const mutationKey = ['tripAgentControllerProcessTripQuery'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tripAgentControllerProcessTripQuery>>,
    { id: string; data: TripQueryRequestDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return tripAgentControllerProcessTripQuery(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TripAgentControllerProcessTripQueryMutationResult = NonNullable<
  Awaited<ReturnType<typeof tripAgentControllerProcessTripQuery>>
>;
export type TripAgentControllerProcessTripQueryMutationBody = TripQueryRequestDto;
export type TripAgentControllerProcessTripQueryMutationError = unknown;

/**
 * @summary Process a trip planning query in a conversation
 */
export const useTripAgentControllerProcessTripQuery = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tripAgentControllerProcessTripQuery>>,
    TError,
    { id: string; data: TripQueryRequestDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof tripAgentControllerProcessTripQuery>>,
  TError,
  { id: string; data: TripQueryRequestDto },
  TContext
> => {
  const mutationOptions = getTripAgentControllerProcessTripQueryMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get a sample trip plan
 */
export const tripAgentControllerGetSampleTripPlan = (signal?: AbortSignal) => {
  return customInstance<TripDetailsDto>({ url: `/trip-agent/sample`, method: 'GET', signal });
};

export const getTripAgentControllerGetSampleTripPlanQueryKey = () => {
  return [`/trip-agent/sample`] as const;
};

export const getTripAgentControllerGetSampleTripPlanQueryOptions = <
  TData = Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTripAgentControllerGetSampleTripPlanQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>
  > = ({ signal }) => tripAgentControllerGetSampleTripPlan(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TripAgentControllerGetSampleTripPlanQueryResult = NonNullable<
  Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>
>;
export type TripAgentControllerGetSampleTripPlanQueryError = unknown;

export function useTripAgentControllerGetSampleTripPlan<
  TData = Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>,
        TError,
        Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTripAgentControllerGetSampleTripPlan<
  TData = Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>,
        TError,
        Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTripAgentControllerGetSampleTripPlan<
  TData = Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get a sample trip plan
 */

export function useTripAgentControllerGetSampleTripPlan<
  TData = Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof tripAgentControllerGetSampleTripPlan>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getTripAgentControllerGetSampleTripPlanQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all trip plans for a conversation
 */
export const tripAgentControllerGetTripPlans = (id: string, signal?: AbortSignal) => {
  return customInstance<TripDetailsDto[]>({
    url: `/trip-agent/conversations/${id}/trip-plans`,
    method: 'GET',
    signal,
  });
};

export const getTripAgentControllerGetTripPlansQueryKey = (id: string) => {
  return [`/trip-agent/conversations/${id}/trip-plans`] as const;
};

export const getTripAgentControllerGetTripPlansQueryOptions = <
  TData = Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTripAgentControllerGetTripPlansQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>> = ({
    signal,
  }) => tripAgentControllerGetTripPlans(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TripAgentControllerGetTripPlansQueryResult = NonNullable<
  Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>
>;
export type TripAgentControllerGetTripPlansQueryError = unknown;

export function useTripAgentControllerGetTripPlans<
  TData = Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>,
          TError,
          Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTripAgentControllerGetTripPlans<
  TData = Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>,
          TError,
          Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTripAgentControllerGetTripPlans<
  TData = Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all trip plans for a conversation
 */

export function useTripAgentControllerGetTripPlans<
  TData = Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tripAgentControllerGetTripPlans>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getTripAgentControllerGetTripPlansQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
